/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var resourceUtils = require("../resource/resourceUtils");
var util = require("util");
var validation = require("../../../util/validation");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var applicationGateways = network.category("application-gateway").description($("Commands to manage application gateways"));

  var httpListeners = applicationGateways.category("http-listener").description($("Commands to manage http listeners"));


  httpListeners.command("create [resource-group] [gateway-name] [name]").description($("Create a http listeners")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the http listener")).option("-i, --frontend-ip-name [frontend-ip-name]", $(("sets frontend ip configuration. This" + "\n     option is mutually exclusive with --frontend-ip-id"))).option("-d, --frontend-ip-id [frontend-ip-id]", $(("sets frontend ip configuration. This" + "\n     option is mutually exclusive with --frontend-ip-name"))).option("-p, --frontend-port-name [frontend-port-name]", $(("sets frontend port. This option is" + "\n     mutually exclusive with --frontend-port-id"))).option("-e, --frontend-port-id [frontend-port-id]", $(("sets frontend port. This option is" + "\n     mutually exclusive with --frontend-port-name"))).option("-r, --protocol [protocol]", $("protocol")).option("-o, --host-name [host-name]", $("host name of HTTP listener")).option("-c, --ssl-cert [ssl-cert]", $(("sets ssl certificate. This option is" + "\n     mutually exclusive with --ssl-cert-id"))).option("-f, --ssl-cert-id [ssl-cert-id]", $(("sets ssl certificate. This option is" + "\n     mutually exclusive with --ssl-cert"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, index, applicationGateway, progress, parameters, referredfrontendIPConfiguration, idContainerfrontendIPConfiguration, referredfrontendPort, idContainerfrontendPort, referredsslCertificate, idContainersslCertificate; var __frame = { name: "__1", line: 63 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {






















      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);

            index = 0;

            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 12, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                if (utils.findFirstCaseIgnore(applicationGateway.httpListeners, { name: name })) {
                  return _(new Error(util.format($("http listeners with name \"%s\" already exists in the \"%s\""), name, gatewayName))); } ;


                parameters = { };
                if (!parameters.httpListeners) {
                  parameters.httpListeners = []; } ;

                if (!parameters.httpListeners[index]) {
                  parameters.httpListeners[index] = { }; } ;

                if (!parameters.httpListeners[index].frontendIPConfiguration) {
                  parameters.httpListeners[index].frontendIPConfiguration = { }; } ;

                if (options.frontendIpId) {
                  if (options.frontendIpName) {
                    cli.output.warn($("--frontend-ip-name parameter will be ignored because --frontend-ip-id and --frontend-ip-name are mutually exclusive")); } ;

                  parameters.httpListeners[index].frontendIPConfiguration.id = options.frontendIpId; } else {
                  if (options.frontendIpName) {
                    referredfrontendIPConfiguration = utils.findFirstCaseIgnore(applicationGateway.frontendIPConfigurations, { name: options.frontendIpName });
                    if (!referredfrontendIPConfiguration) {
                      return _(new Error(util.format($("No frontend ip configuration with name \"%s\" found"), options.frontendIpName))); } ;

                    idContainerfrontendIPConfiguration = referredfrontendIPConfiguration;
                    parameters.httpListeners[index].frontendIPConfiguration.id = idContainerfrontendIPConfiguration.id; } ; } ;


                if (!parameters.httpListeners[index].frontendPort) {
                  parameters.httpListeners[index].frontendPort = { }; } ;

                if (options.frontendPortId) {
                  if (options.frontendPortName) {
                    cli.output.warn($("--frontend-port-name parameter will be ignored because --frontend-port-id and --frontend-port-name are mutually exclusive")); } ;

                  parameters.httpListeners[index].frontendPort.id = options.frontendPortId; } else {
                  if (options.frontendPortName) {
                    referredfrontendPort = utils.findFirstCaseIgnore(applicationGateway.frontendPorts, { name: options.frontendPortName });
                    if (!referredfrontendPort) {
                      return _(new Error(util.format($("No frontend port with name \"%s\" found"), options.frontendPortName))); } ;

                    idContainerfrontendPort = referredfrontendPort;
                    parameters.httpListeners[index].frontendPort.id = idContainerfrontendPort.id; } ; } ;


                if (options.protocol) {
                  parameters.httpListeners[index].protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                if (options.hostName) {
                  parameters.httpListeners[index].hostName = options.hostName; } ;


                if (!parameters.httpListeners[index].sslCertificate) {
                  parameters.httpListeners[index].sslCertificate = { }; } ;

                if (options.sslCertId) {
                  if (options.sslCert) {
                    cli.output.warn($("--ssl-cert parameter will be ignored because --ssl-cert-id and --ssl-cert are mutually exclusive")); } ;

                  parameters.httpListeners[index].sslCertificate.id = options.sslCertId; } else {
                  if (options.sslCert) {
                    referredsslCertificate = utils.findFirstCaseIgnore(applicationGateway.sslCertificates, { name: options.sslCert });
                    if (!referredsslCertificate) {
                      return _(new Error(util.format($("No ssl certificate with name \"%s\" found"), options.sslCert))); } ;

                    idContainersslCertificate = referredsslCertificate;
                    parameters.httpListeners[index].sslCertificate.id = idContainersslCertificate.id; } ; } ;


                parameters.httpListeners[index].name = name;
                applicationGateway.httpListeners.push(parameters.httpListeners[index]);

                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Creating http listeners in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                      return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 103, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                    cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  httpListeners.command("set [resource-group] [gateway-name] [name]").description($("Update a http listeners")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the http listener")).option("-i, --frontend-ip-name [frontend-ip-name]", $(("sets frontend ip configuration. This" + "\n     option is mutually exclusive with --frontend-ip-id"))).option("-d, --frontend-ip-id [frontend-ip-id]", $(("sets frontend ip configuration. This" + "\n     option is mutually exclusive with --frontend-ip-name"))).option("-p, --frontend-port-name [frontend-port-name]", $(("sets frontend port. This option is" + "\n     mutually exclusive with --frontend-port-id"))).option("-e, --frontend-port-id [frontend-port-id]", $(("sets frontend port. This option is" + "\n     mutually exclusive with --frontend-port-name"))).option("-r, --protocol [protocol]", $("protocol")).option("-o, --host-name [host-name]", $("host name of HTTP listener")).option("-c, --ssl-cert [ssl-cert]", $(("sets ssl certificate. This option is" + "\n     mutually exclusive with --ssl-cert-id"))).option("-f, --ssl-cert-id [ssl-cert-id]", $(("sets ssl certificate. This option is" + "\n     mutually exclusive with --ssl-cert"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, httpListener, index, parameters, referredfrontendIPConfiguration, idContainerfrontendIPConfiguration, referredfrontendPort, idContainerfrontendPort, referredsslCertificate, idContainersslCertificate; var __frame = { name: "__2", line: 196 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {






















      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                httpListener = utils.findFirstCaseIgnore(applicationGateway.httpListeners, { name: name });
                index = utils.indexOfCaseIgnore(applicationGateway.httpListeners, { name: name });
                if (!httpListener) {
                  return _(new Error(util.format($("http listeners with name \"%s\" not found in the \"%s\""), name, gatewayName))); } ;


                parameters = applicationGateway;
                if (!parameters.httpListeners) {
                  parameters.httpListeners = []; } ;

                if (!parameters.httpListeners[index]) {
                  parameters.httpListeners[index] = { }; } ;

                if (!parameters.httpListeners[index].frontendIPConfiguration) {
                  parameters.httpListeners[index].frontendIPConfiguration = { }; } ;

                if (options.frontendIpId) {
                  if (options.frontendIpName) {
                    cli.output.warn($("--frontend-ip-name parameter will be ignored because --frontend-ip-id and --frontend-ip-name are mutually exclusive")); } ;

                  parameters.httpListeners[index].frontendIPConfiguration.id = options.frontendIpId; } else {
                  if (options.frontendIpName) {
                    referredfrontendIPConfiguration = utils.findFirstCaseIgnore(applicationGateway.frontendIPConfigurations, { name: options.frontendIpName });
                    if (!referredfrontendIPConfiguration) {
                      return _(new Error(util.format($("No frontend ip configuration with name \"%s\" found"), options.frontendIpName))); } ;

                    idContainerfrontendIPConfiguration = referredfrontendIPConfiguration;
                    parameters.httpListeners[index].frontendIPConfiguration.id = idContainerfrontendIPConfiguration.id; } ; } ;


                if (!parameters.httpListeners[index].frontendPort) {
                  parameters.httpListeners[index].frontendPort = { }; } ;

                if (options.frontendPortId) {
                  if (options.frontendPortName) {
                    cli.output.warn($("--frontend-port-name parameter will be ignored because --frontend-port-id and --frontend-port-name are mutually exclusive")); } ;

                  parameters.httpListeners[index].frontendPort.id = options.frontendPortId; } else {
                  if (options.frontendPortName) {
                    referredfrontendPort = utils.findFirstCaseIgnore(applicationGateway.frontendPorts, { name: options.frontendPortName });
                    if (!referredfrontendPort) {
                      return _(new Error(util.format($("No frontend port with name \"%s\" found"), options.frontendPortName))); } ;

                    idContainerfrontendPort = referredfrontendPort;
                    parameters.httpListeners[index].frontendPort.id = idContainerfrontendPort.id; } ; } ;


                if (options.protocol) {
                  parameters.httpListeners[index].protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                if (options.hostName) {
                  parameters.httpListeners[index].hostName = options.hostName; } ;


                if (!parameters.httpListeners[index].sslCertificate) {
                  parameters.httpListeners[index].sslCertificate = { }; } ;

                if (options.sslCertId) {
                  if (options.sslCert) {
                    cli.output.warn($("--ssl-cert parameter will be ignored because --ssl-cert-id and --ssl-cert are mutually exclusive")); } ;

                  parameters.httpListeners[index].sslCertificate.id = options.sslCertId; } else {
                  if (options.sslCert) {
                    referredsslCertificate = utils.findFirstCaseIgnore(applicationGateway.sslCertificates, { name: options.sslCert });
                    if (!referredsslCertificate) {
                      return _(new Error(util.format($("No ssl certificate with name \"%s\" found"), options.sslCert))); } ;

                    idContainersslCertificate = referredsslCertificate;
                    parameters.httpListeners[index].sslCertificate.id = idContainersslCertificate.id; } ; } ;


                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating http listeners in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 101, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {

                    cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  httpListeners.command("delete [resource-group] [gateway-name] [name]").description($("Delete a http listeners")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the http listener")).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, index; var __frame = { name: "__3", line: 313 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {









      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __3) { gatewayName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(applicationGateway.httpListeners, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("http listeners \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name))); } ; return (function __$__3(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete http listeners with name \"%s\" from \"%s\"? [y/n] "), name, gatewayName), __cb(_, __frame, 31, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -312, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__3() {



                    applicationGateway.httpListeners.splice(index, 1);
                    progress = cli.interaction.progress("Deleting http listeners"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                          return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 38, 73, function ___(__0, __7) { applicationGateway = __7; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                        cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  httpListeners.command("show [resource-group] [gateway-name] [name]").description($("Show a http listeners")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the http listener")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, httpListener; var __frame = { name: "__4", line: 366 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                httpListener = utils.findFirstCaseIgnore(applicationGateway.httpListeners, { name: name });
                if (!httpListener) {
                  cli.output.warn(util.format($("http listeners with name \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name)); } ;


                cli.interaction.formatOutput(httpListener, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  httpListeners.command("list [resource-group] [gateway-name]").description($("List http listeners")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, applicationGateway, progress, items; var __frame = { name: "__5", line: 406 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      applicationGateway = null;
      progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                  return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 7, 73, function ___(__0, __1) { applicationGateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      applicationGateway = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          if (!applicationGateway) {
            return _(new Error(util.format($("application gateways with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


          items = applicationGateway.httpListeners;
          cli.interaction.formatOutput(items, function(items) {
            if ((items.length === 0)) {
              cli.output.warn($("No http listeners found")); }
             else {
              cli.output.table(items, function(row, item) {
                row.cell($("Name"), item.name);
                var resInfo = resourceUtils.getResourceInformation(item.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), item.provisioningState); }); } ; }); _(); }); }); }); });};
