/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var resourceUtils = require("../resource/resourceUtils");
var util = require("util");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var applicationGateways = network.category("application-gateway").description($("Commands to manage application gateways"));

  var urlPathMaps = applicationGateways.category("url-path-map").description($("Commands to manage url path maps"));


  urlPathMaps.command("create [resource-group] [gateway-name] [name]").description($("Create an url path maps")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the url path map")).option("-p, --path [path]", $("path rules of URL path map")).option("-a, --address-pool-name [address-pool-name]", $(("sets backend address pool. This option" + "\n     is mutually exclusive with --address-pool-id"))).option("-o, --address-pool-id [address-pool-id]", $(("sets backend address pool. This option" + "\n     is mutually exclusive with --address-pool-name"))).option("-i, --http-settings-name [http-settings-name]", $(("sets backend http settings. This option" + "\n     is mutually exclusive with --backend-http-setting-id"))).option("-e, --http-settings-id [http-settings-id]", $(("sets backend http settings. This option" + "\n     is mutually exclusive with --http-settings-name"))).option("-r, --rule-name [rule-name]", $("sets path rules name")).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, index, applicationGateway, progress, parameters, referredbackendAddressPool, idContainerbackendAddressPool, referredbackendHttpSettings, idContainerbackendHttpSettings; var __frame = { name: "__1", line: 58 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {


















      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);

            index = 0;

            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 12, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                if (utils.findFirstCaseIgnore(applicationGateway.urlPathMaps, { name: name })) {
                  return _(new Error(util.format($("url path maps with name \"%s\" already exists in the \"%s\""), name, gatewayName))); } ;


                parameters = { };
                if (!parameters.urlPathMaps) {
                  parameters.urlPathMaps = []; } ;

                if (!parameters.urlPathMaps[index]) {
                  parameters.urlPathMaps[index] = { }; } ;

                if (!parameters.urlPathMaps[index].pathRules) {
                  parameters.urlPathMaps[index].pathRules = []; } ;

                if (!parameters.urlPathMaps[index].pathRules[index]) {
                  parameters.urlPathMaps[index].pathRules[index] = { }; } ;

                if (options.path) {
                  parameters.urlPathMaps[index].pathRules[index].paths = options.path.split(","); } ;


                if (!parameters.urlPathMaps[index].pathRules[index].backendAddressPool) {
                  parameters.urlPathMaps[index].pathRules[index].backendAddressPool = { }; } ;

                if (options.addressPoolId) {
                  if (options.addressPoolName) {
                    cli.output.warn($("--address-pool-name parameter will be ignored because --address-pool-id and --address-pool-name are mutually exclusive")); } ;

                  parameters.urlPathMaps[index].pathRules[index].backendAddressPool.id = options.addressPoolId;
                  parameters.urlPathMaps[index].defaultBackendAddressPool = { };
                  parameters.urlPathMaps[index].defaultBackendAddressPool.id = options.addressPoolId; } else {
                  if (options.addressPoolName) {
                    referredbackendAddressPool = utils.findFirstCaseIgnore(applicationGateway.backendAddressPools, { name: options.addressPoolName });
                    if (!referredbackendAddressPool) {
                      return _(new Error(util.format($("No backend address pool with name \"%s\" found"), options.addressPoolName))); } ;

                    idContainerbackendAddressPool = referredbackendAddressPool;
                    parameters.urlPathMaps[index].defaultBackendAddressPool = { };
                    parameters.urlPathMaps[index].defaultBackendAddressPool.id = idContainerbackendAddressPool.id;
                    parameters.urlPathMaps[index].pathRules[index].backendAddressPool.id = idContainerbackendAddressPool.id; } ; } ;


                if (!parameters.urlPathMaps[index].pathRules[index].backendHttpSettings) {
                  parameters.urlPathMaps[index].pathRules[index].backendHttpSettings = { }; } ;

                if (options.httpSettingsId) {
                  if (options.httpSettingsName) {
                    cli.output.warn($("--http-settings-name parameter will be ignored because --http-settings-id and --http-settings-name are mutually exclusive")); } ;

                  parameters.urlPathMaps[index].pathRules[index].backendHttpSettings.id = options.httpSettingsId;
                  parameters.urlPathMaps[index].defaultBackendHttpSettings = { };
                  parameters.urlPathMaps[index].defaultBackendHttpSettings.id = options.httpSettingsId; } else {
                  if (options.httpSettingsName) {
                    referredbackendHttpSettings = utils.findFirstCaseIgnore(applicationGateway.backendHttpSettingsCollection, { name: options.httpSettingsName });
                    if (!referredbackendHttpSettings) {
                      return _(new Error(util.format($("No backend http settings with name \"%s\" found"), options.httpSettingsName))); } ;

                    idContainerbackendHttpSettings = referredbackendHttpSettings;
                    parameters.urlPathMaps[index].defaultBackendHttpSettings = { };
                    parameters.urlPathMaps[index].defaultBackendHttpSettings.id = idContainerbackendHttpSettings.id;
                    parameters.urlPathMaps[index].pathRules[index].backendHttpSettings.id = idContainerbackendHttpSettings.id; } ; } ;


                if (options.ruleName) {
                  parameters.urlPathMaps[index].pathRules[index].name = options.ruleName; } ;


                parameters.urlPathMaps[index].name = name;
                applicationGateway.urlPathMaps.push(parameters.urlPathMaps[index]);

                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Creating url path maps in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                      return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 100, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                    cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  urlPathMaps.command("delete [resource-group] [gateway-name] [name]").description($("Delete a url path maps")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the url path map")).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, index; var __frame = { name: "__2", line: 175 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {









      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __3) { gatewayName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(applicationGateway.urlPathMaps, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("url path maps \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name))); } ; return (function __$__2(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete url path maps with name \"%s\" from \"%s\"? [y/n] "), name, gatewayName), __cb(_, __frame, 31, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -174, 17, function ___(__0, __6) { return (function __$__2(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__2() {



                    applicationGateway.urlPathMaps.splice(index, 1);
                    progress = cli.interaction.progress("Deleting url path maps"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                          return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 38, 73, function ___(__0, __7) { applicationGateway = __7; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                        cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  urlPathMaps.command("show [resource-group] [gateway-name] [name]").description($("Show an url path maps")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the url path map")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, urlPathMap; var __frame = { name: "__3", line: 228 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                urlPathMap = utils.findFirstCaseIgnore(applicationGateway.urlPathMaps, { name: name });
                if (!urlPathMap) {
                  cli.output.warn(util.format($("url path maps with name \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name)); } ;


                cli.interaction.formatOutput(urlPathMap, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  urlPathMaps.command("list [resource-group] [gateway-name]").description($("List url path maps")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, applicationGateway, progress, items; var __frame = { name: "__4", line: 268 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      applicationGateway = null;
      progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                  return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 7, 73, function ___(__0, __1) { applicationGateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                    if ((e.statusCode === 404)) {
                      applicationGateway = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


          if (!applicationGateway) {
            return _(new Error(util.format($("application gateways with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


          items = applicationGateway.urlPathMaps;
          cli.interaction.formatOutput(items, function(items) {
            if ((items.length === 0)) {
              cli.output.warn($("No url path maps found")); }
             else {
              cli.output.table(items, function(row, item) {
                row.cell($("Name"), item.name);
                var resInfo = resourceUtils.getResourceInformation(item.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), item.provisioningState); }); } ; }); _(); }); }); }); });};
