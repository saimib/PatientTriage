/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var resourceUtils = require("../resource/resourceUtils");
var util = require("util");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var loadBalancers = network.category("lb").description($("Commands to manage load balancers"));

  var backendAddressPools = loadBalancers.category("address-pool").description($("Commands to manage backend address pools"));


  backendAddressPools.command("create [resource-group] [lb-name] [name]").description($("Create a backend address pools")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the lb name")).option("-n, --name <name>", $("the name of the backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, lbName, name, options, _) { var subscription, networkManagementClient, index, loadBalancer, progress, parameters; var __frame = { name: "__1", line: 47 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("lb name : "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);

            index = 0;

            progress = cli.interaction.progress(util.format($("Looking up the load balancer \"%s\""), lbName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, __cb(_, __frame, 12, 61, function ___(__0, __4) { loadBalancer = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                          if ((e.statusCode === 404)) {
                            loadBalancer = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                if (!loadBalancer) {
                  return _(new Error(util.format($("load balancer with name \"%s\" not found in the resource group \"%s\""), lbName, resourceGroup))); } ;


                if (utils.findFirstCaseIgnore(loadBalancer.backendAddressPools, { name: name })) {
                  return _(new Error(util.format($("backend address pools with name \"%s\" already exists in the \"%s\""), name, lbName))); } ;


                parameters = { };

                if (!parameters.backendAddressPools) {
                  parameters.backendAddressPools = []; } ;

                if (!parameters.backendAddressPools[index]) {
                  parameters.backendAddressPools[index] = { }; } ;


                parameters.backendAddressPools[index].name = name;
                loadBalancer.backendAddressPools.push(parameters.backendAddressPools[index]);

                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Creating backend address pools in \"%s\""), lbName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                      return networkManagementClient.loadBalancers.createOrUpdate(resourceGroup, lbName, loadBalancer, __cb(_, __frame, 46, 61, function ___(__0, __5) { loadBalancer = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                    cli.interaction.formatOutput(loadBalancer.backendAddressPools[generatorUtils.findIndexByKeyValue(loadBalancer.backendAddressPools, "name", name)], generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  backendAddressPools.command("delete [resource-group] [lb-name] [name]").description($("Delete a backend address pools")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the lb name")).option("-n, --name <name>", $("the name of the backend address pool")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, lbName, name, options, _) { var subscription, networkManagementClient, loadBalancer, progress, index; var __frame = { name: "__2", line: 109 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {








      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("lb name : "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __3) { lbName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the load balancer \"%s\""), lbName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, __cb(_, __frame, 11, 61, function ___(__0, __5) { loadBalancer = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            loadBalancer = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!loadBalancer) {
                  return _(new Error(util.format($("load balancer \"%s\" not found in the resource group \"%s\""), lbName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(loadBalancer.backendAddressPools, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("backend address pools \"%s\" not found in the lbName \"%s\""), name, loadBalancer.name))); } ; return (function __$__2(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete backend address pools with name \"%s\" from \"%s\"? [y/n] "), name, lbName), __cb(_, __frame, 31, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -108, 17, function ___(__0, __6) { return (function __$__2(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__2() {



                    loadBalancer.backendAddressPools.splice(index, 1);
                    progress = cli.interaction.progress("Deleting backend address pools"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                          return networkManagementClient.loadBalancers.createOrUpdate(resourceGroup, lbName, loadBalancer, __cb(_, __frame, 38, 61, function ___(__0, __7) { loadBalancer = __7; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() { _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });



  backendAddressPools.command("show [resource-group] [lb-name] [name]").description($("Show a backend address pools")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the lb name")).option("-n, --name <name>", $("the name of the backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, lbName, name, options, _) { var subscription, networkManagementClient, loadBalancer, progress, backendAddressPool; var __frame = { name: "__3", line: 160 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("lb name : "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the load balancer \"%s\""), lbName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, __cb(_, __frame, 11, 61, function ___(__0, __4) { loadBalancer = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            loadBalancer = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!loadBalancer) {
                  return _(new Error(util.format($("load balancer with name \"%s\" not found in the resource group \"%s\""), lbName, resourceGroup))); } ;


                backendAddressPool = utils.findFirstCaseIgnore(loadBalancer.backendAddressPools, { name: name });
                if (!backendAddressPool) {
                  cli.output.warn(util.format($("backend address pools with name \"%s\" not found in the lbName \"%s\""), name, loadBalancer.name)); } ;


                cli.interaction.formatOutput(backendAddressPool, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  backendAddressPools.command("list [resource-group] [lb-name]").description($("List backend address pools")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the lb name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, lbName, options, _) { var subscription, networkManagementClient, loadBalancer, progress, items; var __frame = { name: "__4", line: 200 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      loadBalancer = null;
      progress = cli.interaction.progress(util.format($("Looking up the load balancer \"%s\""), lbName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                  return networkManagementClient.loadBalancers.get(resourceGroup, lbName, null, __cb(_, __frame, 7, 61, function ___(__0, __1) { loadBalancer = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                    if ((e.statusCode === 404)) {
                      loadBalancer = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


          if (!loadBalancer) {
            return _(new Error(util.format($("load balancers with name \"%s\" not found in the resource group \"%s\""), lbName, resourceGroup))); } ;


          items = loadBalancer.backendAddressPools;
          cli.interaction.formatOutput(items, function(items) {
            if ((items.length === 0)) {
              cli.output.warn($("No backend address pools found")); }
             else {
              cli.output.table(items, function(row, item) {
                row.cell($("Name"), item.name);
                var resInfo = resourceUtils.getResourceInformation(item.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), item.provisioningState); }); } ; }); _(); }); }); }); });};
