/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var fs = require("fs");






















var generatorUtils = require("../../../util/generatorUtils");
var resourceUtils = require("../resource/resourceUtils");
var util = require("util");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var applicationGateways = network.category("application-gateway").description($("Commands to manage application gateways"));

  var authenticationCertificates = applicationGateways.category("auth-cert").description($("Commands to manage authentication certificates"));


  authenticationCertificates.command("create [resource-group] [gateway-name] [name]").description($("Create an authentication certificates")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the authentication certificate")).option("-f, --cert-file [cert-file]", $("sets authentication certificates name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, index, applicationGateway, progress, parameters, data; var __frame = { name: "__1", line: 49 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {








      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);

            index = 0;

            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 12, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                if (utils.findFirstCaseIgnore(applicationGateway.authenticationCertificates, { name: name })) {
                  return _(new Error(util.format($("authentication certificates with name \"%s\" already exists in the \"%s\""), name, gatewayName))); } ;


                parameters = { };
                if (!parameters.authenticationCertificates) {
                  parameters.authenticationCertificates = []; } ;

                if (!parameters.authenticationCertificates[index]) {
                  parameters.authenticationCertificates[index] = { }; } ; return (function __$__1(__then) {

                  if (options.certFile) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                          data = fs.readFileSync(options.certFile);
                          parameters.authenticationCertificates[index].data = data.toString("base64"); __then(); }); })(function ___(err, __result) { __catch(function __$__1() { if (err) {

                            return _(new Error(("Error in reading the provided file. Make sure that the file path is correct and it has correct content.\n" + util.inspect(err, {
                              depth: null })))); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(function __$__1() {



                  parameters.authenticationCertificates[index].name = name;
                  applicationGateway.authenticationCertificates.push(parameters.authenticationCertificates[index]);

                  generatorUtils.removeEmptyObjects(parameters);
                  progress = cli.interaction.progress(util.format($("Creating authentication certificates in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 54, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                      cli.interaction.formatOutput(applicationGateway.authenticationCertificates[generatorUtils.findIndexByKeyValue(applicationGateway.authenticationCertificates, "name", name)], generatorUtils.traverse); _(); }); }); }); }); }); }, true)); }, true)); }, true)); }); });


  authenticationCertificates.command("set [resource-group] [gateway-name] [name]").description($("Update an authentication certificates")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the authentication certificate")).option("-f, --cert-file [cert-file]", $("sets authentication certificates name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, authenticationCertificate, index, parameters, data; var __frame = { name: "__2", line: 119 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {








      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                authenticationCertificate = utils.findFirstCaseIgnore(applicationGateway.authenticationCertificates, { name: name });
                index = utils.indexOfCaseIgnore(applicationGateway.authenticationCertificates, { name: name });
                if (!authenticationCertificate) {
                  return _(new Error(util.format($("authentication certificates with name \"%s\" not found in the \"%s\""), name, gatewayName))); } ;


                parameters = applicationGateway;
                if (!parameters.authenticationCertificates) {
                  parameters.authenticationCertificates = []; } ;

                if (!parameters.authenticationCertificates[index]) {
                  parameters.authenticationCertificates[index] = { }; } ; return (function __$__2(__then) {

                  if (options.certFile) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                          data = fs.readFileSync(options.certFile);
                          parameters.authenticationCertificates[index].data = data.toString("base64"); __then(); }); })(function ___(err, __result) { __catch(function __$__2() { if (err) {

                            return _(new Error(("Error in reading the provided file. Make sure that the file path is correct and it has correct content.\n" + util.inspect(err, {
                              depth: null })))); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(function __$__2() {



                  generatorUtils.removeEmptyObjects(parameters);
                  progress = cli.interaction.progress(util.format($("Updating authentication certificates in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 52, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {

                      cli.interaction.formatOutput(applicationGateway.authenticationCertificates[index], generatorUtils.traverse); _(); }); }); }); }); }); }, true)); }, true)); }, true)); }); });


  authenticationCertificates.command("delete [resource-group] [gateway-name] [name]").description($("Delete a authentication certificates")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the authentication certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, index; var __frame = { name: "__3", line: 186 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {








      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __3) { gatewayName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(applicationGateway.authenticationCertificates, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("authentication certificates \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name))); } ; return (function __$__3(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete authentication certificates with name \"%s\" from \"%s\"? [y/n] "), name, gatewayName), __cb(_, __frame, 31, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -185, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__3() {



                    applicationGateway.authenticationCertificates.splice(index, 1);
                    progress = cli.interaction.progress("Deleting authentication certificates"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                          return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 38, 73, function ___(__0, __7) { applicationGateway = __7; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() { _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });



  authenticationCertificates.command("show [resource-group] [gateway-name] [name]").description($("Show an authentication certificates")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the authentication certificate")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, authenticationCertificate; var __frame = { name: "__4", line: 237 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                authenticationCertificate = utils.findFirstCaseIgnore(applicationGateway.authenticationCertificates, { name: name });
                if (!authenticationCertificate) {
                  cli.output.warn(util.format($("authentication certificates with name \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name)); } ;


                cli.interaction.formatOutput(authenticationCertificate, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  authenticationCertificates.command("list [resource-group] [gateway-name]").description($("List authentication certificates")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, applicationGateway, progress, items; var __frame = { name: "__5", line: 277 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      applicationGateway = null;
      progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                  return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 7, 73, function ___(__0, __1) { applicationGateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      applicationGateway = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          if (!applicationGateway) {
            return _(new Error(util.format($("application gateways with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


          items = applicationGateway.authenticationCertificates;
          cli.interaction.formatOutput(items, function(items) {
            if ((items.length === 0)) {
              cli.output.warn($("No authentication certificates found")); }
             else {
              cli.output.table(items, function(row, item) {
                row.cell($("Name"), item.name);
                var resInfo = resourceUtils.getResourceInformation(item.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), item.provisioningState); }); } ; }); _(); }); }); }); });};
