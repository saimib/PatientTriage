/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var profile = require("../../../util/profile");
var resourceUtils = require("../resource/resourceUtils");
var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));


  var virtualNetworks = network.category("vnet").description($("Commands to manage virtual network peerings"));


  var virtualNetworkPeerings = virtualNetworks.category("peering").description($("Commands to manage virtual network peerings"));


  virtualNetworkPeerings.command("create [resource-group] [vnet-name] [name] [remote-vnet-id]").description($("Create a virtual network peering")).usage("[options] <resource-group> <vnet-name> <name> <remote-vnet-id>").option("-g, --resource-group <resource-group>", $("the resource-group of virtual network peering")).option("-e, --vnet-name <vnet-name>", $("the virtual-network-name of virtual network peering")).option("-n, --name <name>", $("the virtual-network-peering-name of virtual network peering")).option("-r, --remote-vnet-id <remote-vnet-id>", $("the reference of the remote virtual network by Id")).option("-f, --allow-forwarded-traffic <allow-forwarded-traffic>", $(("whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed" + "\n      Valid values are [true,false]"))).option("-y, --allow-gateway-transit <allow-gateway-transit>", $(("if gatewayLinks can be used in remote virtual network’s link to this virtual network" + "\n      Valid values are [true,false]"))).option("-w, --use-remote-gateways <use-remote-gateways>", $(("if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remotepeering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway." + "\n      Valid values are [true,false]"))).option("-a, --allow-vnet-access <allow-vnet-access>", $(("whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space" + "\n      Valid values are [true,false]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, vnetName, name, remoteVnetId, options, _) { var subscription, networkManagementClient, result, progress, parameters; var __frame = { name: "__1", line: 55 }; return __func(_, this, arguments, __1, 5, __frame, function __$__1() { return (function __$__1(__then) {
















        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 40, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() { return (function __$__1(__then) {

          if (!vnetName) {
            return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 5, 35, function ___(__0, __2) { vnetName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() { return (function __$__1(__then) {

            if (!name) {
              return cli.interaction.promptIfNotGiven($("virtual-network-peering-name : "), name, __cb(_, __frame, 8, 31, function ___(__0, __3) { name = __3; __then(); }, true)); } else { __then(); } ; })(function __$__1() { return (function __$__1(__then) {


              if (!options.remoteVnetId) {
                return cli.interaction.promptIfNotGiven($("remote-virtual-network-id : "), (remoteVnetId || options.remoteVnetId), __cb(_, __frame, 12, 47, function ___(__0, __4) { options.remoteVnetId = __4; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


              subscription = profile.current.getSubscription(options.subscription);
              networkManagementClient = utils.createNetworkManagementClient(subscription);



              progress = cli.interaction.progress(util.format($("Looking up the virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                          return networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, __cb(_, __frame, 22, 64, function ___(__0, __5) { result = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                            if ((e.statusCode === 404)) {
                              result = null; }
                             else {
                              return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {

                  if (result) {
                    return _(new Error(util.format($("A virtual network peering with name \"%s\" already exists in the resource group \"%s\""), name, resourceGroup))); } ;


                  parameters = { };
                  if (options.remoteVnetId) {
                    parameters.remoteVirtualNetwork = { };
                    parameters.remoteVirtualNetwork.id = options.remoteVnetId; } ;

                  if (options.allowForwardedTraffic) {
                    parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic); } ;

                  if (options.allowGatewayTransit) {
                    parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit); } ;

                  if (options.useRemoteGateways) {
                    parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways); } ;

                  if (options.allowVnetAccess) {
                    parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess); } ;


                  generatorUtils.removeEmptyObjects(parameters);
                  progress = cli.interaction.progress(util.format($("Creating virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, __cb(_, __frame, 57, 64, function ___(__0, __6) { result = __6; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {

                      cli.interaction.formatOutput(result, generatorUtils.traverse); _(); }); }); }); }); }); }); }); }); }); });


  virtualNetworkPeerings.command("set [resource-group] [vnet-name] [name]").description($("Update a virtual network peering")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the resource-group of virtual network peering")).option("-e, --vnet-name <vnet-name>", $("the virtual-network-name of virtual network peering")).option("-n, --name <name>", $("the virtual-network-peering-name of virtual network peering")).option("-f, --allow-forwarded-traffic <allow-forwarded-traffic>", $(("whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed" + "\n      Valid values are [true,false]"))).option("-y, --allow-gateway-transit <allow-gateway-transit>", $(("if gatewayLinks can be used in remote virtual network’s link to this virtual network" + "\n      Valid values are [true,false]"))).option("-w, --use-remote-gateways <use-remote-gateways>", $(("if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remotepeering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway." + "\n      Valid values are [true,false]"))).option("-a, --allow-vnet-access <allow-vnet-access>", $(("whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space" + "\n      Valid values are [true,false]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, vnetName, name, options, _) { var subscription, networkManagementClient, result, progress, parameters; var __frame = { name: "__2", line: 134 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() { return (function __$__2(__then) {















        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 40, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__2() { return (function __$__2(__then) {

          if (!vnetName) {
            return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 5, 35, function ___(__0, __2) { vnetName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__2() { return (function __$__2(__then) {

            if (!name) {
              return cli.interaction.promptIfNotGiven($("virtual-network-peering-name : "), name, __cb(_, __frame, 8, 31, function ___(__0, __3) { name = __3; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);



            progress = cli.interaction.progress(util.format($("Looking up the virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, __cb(_, __frame, 18, 64, function ___(__0, __4) { result = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            result = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {

                if (!result) {
                  return _(new Error(util.format($("A virtual network peering with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ;


                parameters = result;
                if (options.allowForwardedTraffic) {
                  parameters.allowForwardedTraffic = utils.parseBool(options.allowForwardedTraffic); } ;

                if (options.allowGatewayTransit) {
                  parameters.allowGatewayTransit = utils.parseBool(options.allowGatewayTransit); } ;

                if (options.useRemoteGateways) {
                  parameters.useRemoteGateways = utils.parseBool(options.useRemoteGateways); } ;

                if (options.allowVnetAccess) {
                  parameters.allowVirtualNetworkAccess = utils.parseBool(options.allowVnetAccess); } ;


                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.virtualNetworkPeerings.createOrUpdate(resourceGroup, vnetName, name, parameters, __cb(_, __frame, 49, 64, function ___(__0, __5) { result = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {

                    cli.interaction.formatOutput(result, generatorUtils.traverse); _(); }); }); }); }); }); }); }); }); });


  virtualNetworkPeerings.command("delete [resource-group] [vnet-name] [name]").description($("Delete a virtual network peering")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the resource-group of virtual network peering")).option("-e, --vnet-name <vnet-name>", $("the virtual-network-name of virtual network peering")).option("-n, --name <name>", $("the virtual-network-peering-name of virtual network peering")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, vnetName, name, options, _) { var subscription, networkManagementClient, result, progress; var __frame = { name: "__3", line: 198 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() { return (function __$__3(__then) {








        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 40, function ___(__0, __2) { resourceGroup = __2; __then(); }, true)); } else { __then(); } ; })(function __$__3() { return (function __$__3(__then) {

          if (!vnetName) {
            return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 5, 35, function ___(__0, __3) { vnetName = __3; __then(); }, true)); } else { __then(); } ; })(function __$__3() { return (function __$__3(__then) {

            if (!name) {
              return cli.interaction.promptIfNotGiven($("virtual-network-peering-name : "), name, __cb(_, __frame, 8, 31, function ___(__0, __4) { name = __4; __then(); }, true)); } else { __then(); } ; })(function __$__3() {


            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, __cb(_, __frame, 17, 64, function ___(__0, __5) { result = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            result = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {

                if (!result) {
                  return _(new Error(util.format($("A virtual network peering with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup))); } ; return (function __$__3(_) {

                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete virtual network peering \"%s\"? [y/n] "), name), __cb(_, __frame, 30, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -197, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__3() {



                    progress = cli.interaction.progress(util.format($("Deleting virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                          return networkManagementClient.virtualNetworkPeerings.deleteMethod(resourceGroup, vnetName, name, __cb(_, __frame, 36, 55, function __$__3() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() { _(); }); }); }); }, true)); }); }); }); }); }); }); });



  virtualNetworkPeerings.command("show [resource-group] [vnet-name] [name]").description($("Show a virtual network peering")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the resource-group of virtual network peering")).option("-e, --vnet-name <vnet-name>", $("the virtual-network-name of virtual network peering")).option("-n, --name <name>", $("the virtual-network-peering-name of virtual network peering")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, vnetName, name, options, _) { var subscription, networkManagementClient, result, progress; var __frame = { name: "__4", line: 247 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() { return (function __$__4(__then) {







        if (!resourceGroup) {
          return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 2, 40, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__4() { return (function __$__4(__then) {

          if (!vnetName) {
            return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 5, 35, function ___(__0, __2) { vnetName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__4() { return (function __$__4(__then) {

            if (!name) {
              return cli.interaction.promptIfNotGiven($("virtual-network-peering-name : "), name, __cb(_, __frame, 8, 31, function ___(__0, __3) { name = __3; __then(); }, true)); } else { __then(); } ; })(function __$__4() {


            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the virtual network peering \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.virtualNetworkPeerings.get(resourceGroup, vnetName, name, null, __cb(_, __frame, 17, 64, function ___(__0, __4) { result = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            result = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {

                if (!result) {
                  cli.output.warn(util.format($("A virtual network peering with name \"%s\" not found in the resource group \"%s\""), name, resourceGroup)); } ;

                cli.interaction.formatOutput(result, generatorUtils.traverse); _(); }); }); }); }); }); }); });


  virtualNetworkPeerings.command("list [resource-group] [vnet-name]").description($("List a virtual network peerings")).usage("[options] <resource-group> <vnet-name>").option("-g, --resource-group <resource-group>", $("the resource-group of virtual network peerings")).option("-e, --vnet-name <vnet-name>", $("the virtual-network-name of virtual network peerings")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, vnetName, options, _) { var subscription, networkManagementClient, result, progress; var __frame = { name: "__5", line: 286 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      options.resourceGroup = resourceGroup;
      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      result = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function __$__5(__then) {



              if ((typeof networkManagementClient.virtualNetworkPeerings.listAll != "function")) { return (function __$__5(__then) {
                  if (!resourceGroup) {
                    return cli.interaction.promptIfNotGiven($("resource-group : "), resourceGroup, __cb(_, __frame, 11, 44, function ___(__0, __1) { resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(function __$__5() { return (function __$__5(__then) {

                    if (!vnetName) {
                      return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 14, 39, function ___(__0, __2) { vnetName = __2; __then(); }, true)); } else { __then(); } ; })(function __$__5() {

                    progress = cli.interaction.progress($("Getting the virtual network peerings"));
                    return networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName, __cb(_, __frame, 17, 66, function ___(__0, __3) { result = __3; __then(); }, true)); }); }); } else { return (function __$__5(__then) {

                  if (options.resourceGroup) { return (function __$__5(__then) {
                      if (!vnetName) {
                        return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 21, 41, function ___(__0, __4) { vnetName = __4; __then(); }, true)); } else { __then(); } ; })(function __$__5() {

                      progress = cli.interaction.progress($("Getting the virtual network peerings"));
                      return networkManagementClient.virtualNetworkPeerings.list(resourceGroup, vnetName, __cb(_, __frame, 24, 68, function ___(__0, __5) { result = __5; __then(); }, true)); }); } else { return (function __$__5(__then) {

                      if (!vnetName) {
                        return cli.interaction.promptIfNotGiven($("virtual-network-name : "), vnetName, __cb(_, __frame, 27, 41, function ___(__0, __6) { vnetName = __6; __then(); }, true)); } else { __then(); } ; })(function __$__5() {

                      progress = cli.interaction.progress($("Getting the virtual network peerings"));
                      return networkManagementClient.virtualNetworkPeerings.listAll(vnetName, __cb(_, __frame, 30, 68, function ___(__0, __7) { result = __7; __then(); }, true)); }); } ; })(__then); } ; })(function __$__5() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          if ((result.length === 0)) {
            cli.output.warn($("No virtual network peerings found")); }
           else {
            cli.output.table(result, function(row, item) {
              row.cell($("Name"), item.name);
              var resInfo = resourceUtils.getResourceInformation(item.id);
              row.cell($("Resource group"), resInfo.resourceGroup);
              row.cell($("Provisioning state"), item.provisioningState); }); } ; _(); }); }); }); });};
