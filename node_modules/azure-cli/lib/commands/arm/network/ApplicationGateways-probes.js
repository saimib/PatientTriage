/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var generatorUtils = require("../../../util/generatorUtils");






















var resourceUtils = require("../resource/resourceUtils");
var util = require("util");
var validation = require("../../../util/validation");

var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));

  var applicationGateways = network.category("application-gateway").description($("Commands to manage application gateways"));

  var probes = applicationGateways.category("probe").description($("Commands to manage probes"));


  probes.command("create [resource-group] [gateway-name] [name] [host-name] [path] [timeout]").description($("Create a probes")).usage("[options] <resource-group> <gateway-name> <name> <host-name> <path> <timeout>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the probe")).option("-p, --protocol [protocol]", $("protocol")).option("-d, --host-name <host-name>", $("host name to send the probe to")).option("-f, --path <path>", $(("relative path of probe. Valid path" + "\n     starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>"))).option("-i, --interval [interval]", $((("the probing interval in seconds. This" + "\n     is the time interval between two consecutive probes. Acceptable values are from") + "\n     1 second to 86400 seconds"))).option("-u, --timeout <timeout>", $((("the probe timeout in seconds. Probe" + "\n     marked as failed if valid response is not received with this timeout period.") + "\n     Acceptable values are from 1 second to 86400 seconds"))).option("-e, --unhealthy-threshold [unhealthy-threshold]", $((("the probe retry count. Backend server" + "\n     is marked down after consecutive probe failure count reaches") + "\n     UnhealthyThreshold. Acceptable values are from 1 second to 20"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, gatewayName, name, hostName, path, timeout, options, _) { var subscription, networkManagementClient, index, applicationGateway, progress, parameters; var __frame = { name: "__1", line: 62 }; return __func(_, this, arguments, __1, 7, __frame, function __$__1() {





















      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("host name : "), hostName, __cb(_, __frame, 4, 41, function ___(__0, __4) { options.hostName = __4;
              return cli.interaction.promptIfNotGiven($("path : "), path, __cb(_, __frame, 5, 37, function ___(__0, __5) { options.path = __5;
                return cli.interaction.promptIfNotGiven($("timeout : "), timeout, __cb(_, __frame, 6, 40, function ___(__0, __6) { options.timeout = __6;

                  subscription = profile.current.getSubscription(options.subscription);
                  networkManagementClient = utils.createNetworkManagementClient(subscription);

                  index = 0;

                  progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                              return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 15, 73, function ___(__0, __7) { applicationGateway = __7; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__1() { if (e) {

                                if ((e.statusCode === 404)) {
                                  applicationGateway = null; }
                                 else {
                                  return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__1() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {


                          progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                      if (!applicationGateway) {
                        return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                      if (utils.findFirstCaseIgnore(applicationGateway.probes, { name: name })) {
                        return _(new Error(util.format($("probes with name \"%s\" already exists in the \"%s\""), name, gatewayName))); } ;


                      parameters = { };
                      if (!parameters.probes) {
                        parameters.probes = []; } ;

                      if (!parameters.probes[index]) {
                        parameters.probes[index] = { }; } ;

                      if (options.protocol) {
                        parameters.probes[index].protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                      if (options.hostName) {
                        parameters.probes[index].host = options.hostName; } ;


                      if (options.path) {
                        parameters.probes[index].path = options.path; } ;


                      if (options.interval) {
                        parameters.probes[index].interval = parseInt(options.interval, 10); } ;


                      if (options.timeout) {
                        parameters.probes[index].timeout = parseInt(options.timeout, 10); } ;


                      if (options.unhealthyThreshold) {
                        parameters.probes[index].unhealthyThreshold = parseInt(options.unhealthyThreshold, 10); } ;


                      parameters.probes[index].name = name;
                      applicationGateway.probes.push(parameters.probes[index]);

                      generatorUtils.removeEmptyObjects(parameters);
                      progress = cli.interaction.progress(util.format($("Creating probes in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                            return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 71, 73, function ___(__0, __8) { applicationGateway = __8; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


                          cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  probes.command("set [resource-group] [gateway-name] [name]").description($("Update a probes")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the probe")).option("-p, --protocol [protocol]", $("protocol")).option("-d, --host-name [host-name]", $("host name to send the probe to")).option("-f, --path [path]", $(("relative path of probe. Valid path" + "\n     starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>"))).option("-i, --interval [interval]", $((("the probing interval in seconds. This" + "\n     is the time interval between two consecutive probes. Acceptable values are from") + "\n     1 second to 86400 seconds"))).option("-u, --timeout [timeout]", $((("the probe timeout in seconds. Probe" + "\n     marked as failed if valid response is not received with this timeout period.") + "\n     Acceptable values are from 1 second to 86400 seconds"))).option("-e, --unhealthy-threshold [unhealthy-threshold]", $((("the probe retry count. Backend server" + "\n     is marked down after consecutive probe failure count reaches") + "\n     UnhealthyThreshold. Acceptable values are from 1 second to 20"))).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, probe, index, parameters; var __frame = { name: "__2", line: 162 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {





















      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                probe = utils.findFirstCaseIgnore(applicationGateway.probes, { name: name });
                index = utils.indexOfCaseIgnore(applicationGateway.probes, { name: name });
                if (!probe) {
                  return _(new Error(util.format($("probes with name \"%s\" not found in the \"%s\""), name, gatewayName))); } ;


                parameters = applicationGateway;
                if (!parameters.probes) {
                  parameters.probes = []; } ;

                if (!parameters.probes[index]) {
                  parameters.probes[index] = { }; } ;

                if (options.protocol) {
                  parameters.probes[index].protocol = validation.isIn(options.protocol, ["Http","Https",], "--protocol"); } ;


                if (options.hostName) {
                  parameters.probes[index].host = options.hostName; } ;


                if (options.path) {
                  parameters.probes[index].path = options.path; } ;


                if (options.interval) {
                  parameters.probes[index].interval = parseInt(options.interval, 10); } ;


                if (options.timeout) {
                  parameters.probes[index].timeout = parseInt(options.timeout, 10); } ;


                if (options.unhealthyThreshold) {
                  parameters.probes[index].unhealthyThreshold = parseInt(options.unhealthyThreshold, 10); } ;


                generatorUtils.removeEmptyObjects(parameters);
                progress = cli.interaction.progress(util.format($("Updating probes in \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                      return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 66, 73, function ___(__0, __5) { applicationGateway = __5; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {

                    cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }); }, true)); }, true)); }, true)); }); });


  probes.command("delete [resource-group] [gateway-name] [name]").description($("Delete a probes")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the probe")).option("--nowait", $("do not wait for the operation to complete. Returns as soon as the intial request is received by the server")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, index; var __frame = { name: "__3", line: 244 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {









      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __2) { resourceGroup = __2;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __3) { gatewayName = __3;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __4) { name = __4;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __5) { applicationGateway = __5; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                index = utils.indexOfCaseIgnore(applicationGateway.probes, { name: name });
                if ((index === -1)) {
                  return _(new Error(util.format($("probes \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name))); } ; return (function __$__3(_) {


                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete probes with name \"%s\" from \"%s\"? [y/n] "), name, gatewayName), __cb(_, __frame, 31, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -243, 17, function ___(__0, __6) { return (function __$__3(__then) { if (__6) { return _(null); } else { __then(); } ; })(function __$__3() {



                    applicationGateway.probes.splice(index, 1);
                    progress = cli.interaction.progress("Deleting probes"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

                          return networkManagementClient.applicationGateways.createOrUpdate(resourceGroup, gatewayName, applicationGateway, __cb(_, __frame, 38, 73, function ___(__0, __7) { applicationGateway = __7; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

                            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


                        cli.interaction.formatOutput(applicationGateway, generatorUtils.traverse); _(); }); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  probes.command("show [resource-group] [gateway-name] [name]").description($("Show a probes")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-n, --name <name>", $("the name of the probe")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, gatewayName, name, options, _) { var subscription, networkManagementClient, applicationGateway, progress, probe; var __frame = { name: "__4", line: 297 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {







      return cli.interaction.promptIfNotGiven($("resource group : "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("gateway name : "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            subscription = profile.current.getSubscription(options.subscription);
            networkManagementClient = utils.createNetworkManagementClient(subscription);


            progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                        return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 11, 73, function ___(__0, __4) { applicationGateway = __4; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__4() { if (e) {

                          if ((e.statusCode === 404)) {
                            applicationGateway = null; }
                           else {
                            return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__4() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


                if (!applicationGateway) {
                  return _(new Error(util.format($("application gateway with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


                probe = utils.findFirstCaseIgnore(applicationGateway.probes, { name: name });
                if (!probe) {
                  cli.output.warn(util.format($("probes with name \"%s\" not found in the gatewayName \"%s\""), name, applicationGateway.name)); } ;


                cli.interaction.formatOutput(probe, generatorUtils.traverse); _(); }); }); }, true)); }, true)); }, true)); }); });


  probes.command("list [resource-group] [gateway-name]").description($("List probes")).usage("[options] <resource-group> <gateway-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the gateway name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, gatewayName, options, _) { var subscription, networkManagementClient, applicationGateway, progress, items; var __frame = { name: "__5", line: 337 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {






      subscription = profile.current.getSubscription(options.subscription);
      networkManagementClient = utils.createNetworkManagementClient(subscription);

      applicationGateway = null;
      progress = cli.interaction.progress(util.format($("Looking up the application gateway \"%s\""), gatewayName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                  return networkManagementClient.applicationGateways.get(resourceGroup, gatewayName, null, __cb(_, __frame, 7, 73, function ___(__0, __1) { applicationGateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      applicationGateway = null; }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          if (!applicationGateway) {
            return _(new Error(util.format($("application gateways with name \"%s\" not found in the resource group \"%s\""), gatewayName, resourceGroup))); } ;


          items = applicationGateway.probes;
          cli.interaction.formatOutput(items, function(items) {
            if ((items.length === 0)) {
              cli.output.warn($("No probes found")); }
             else {
              cli.output.table(items, function(row, item) {
                row.cell($("Name"), item.name);
                var resInfo = resourceUtils.getResourceInformation(item.id);
                row.cell($("Resource group"), resInfo.resourceGroup);
                row.cell($("Provisioning state"), item.provisioningState); }); } ; }); _(); }); }); }); });};
